CREATE TABLE IF NOT EXISTS authorities
(
    authority_cod varchar(20),
    description   varchar(255) NOT NULL,
    PRIMARY KEY (authority_cod)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id      int8 GENERATED BY DEFAULT AS IDENTITY,
    cpf_num      varchar(11)  NOT NULL,
    password     varchar(255) NOT NULL,
    email        varchar(255) NOT NULL,
    name         varchar(255) NOT NULL,
    recovery_cod varchar(255),
    enabled      boolean      NOT NULL DEFAULT true,
    PRIMARY KEY (user_id),
    CONSTRAINT cpf_un UNIQUE (cpf_num),
    CONSTRAINT email_un UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS permissions
(
    user_id       int8        NOT NULL,
    authority_cod varchar(20) NOT NULL,
    CONSTRAINT users_id FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT auth_cod FOREIGN KEY (authority_cod) REFERENCES authorities (authority_cod),
    CONSTRAINT perm_un UNIQUE (user_id, authority_cod)
);

CREATE TABLE IF NOT EXISTS alerts
(
    alert_id int8 GENERATED BY DEFAULT AS IDENTITY,
    time     int4      NOT NULL,
    time_cod bpchar(1) NOT NULL,
    PRIMARY KEY (alert_id),
    CONSTRAINT time_code UNIQUE (time, time_cod)
);

CREATE TABLE IF NOT EXISTS companies
(
    company_id int8 GENERATED BY DEFAULT AS IDENTITY,
    cnpj       varchar(14)  NOT NULL,
    name       varchar(255) NOT NULL,
    PRIMARY KEY (company_id),
    CONSTRAINT comp_cnpj UNIQUE (cnpj)
);

CREATE TABLE IF NOT EXISTS contracts_type
(
    contract_type_id int8 GENERATED BY DEFAULT AS IDENTITY,
    contract_code    varchar(10)  NOT NULL,
    description      varchar(255) NOT NULL,
    max_validity     int4         NOT NULL,
    PRIMARY KEY (contract_type_id),
    CONSTRAINT cont_code UNIQUE (contract_code)
);

CREATE TABLE IF NOT EXISTS contracts
(
    contract_id
    int8
    GENERATED
    BY
    DEFAULT AS
    IDENTITY,
    contract_number
    varchar
(
    255
),
    contract_type_id int8 NOT NULL,
    company_id int8 NOT NULL,
    initial_date date NOT NULL,
    final_date date NOT NULL,
    PRIMARY KEY
(
    contract_id
),
    CONSTRAINT contract_type FOREIGN KEY
(
    contract_type_id
) REFERENCES contracts_type
(
    contract_type_id
),
    CONSTRAINT contrac_comp FOREIGN KEY
(
    company_id
) REFERENCES companies
(
    company_id
),
    CONSTRAINT contrac_numb UNIQUE
(
    contract_number
)
    );

CREATE TABLE IF NOT EXISTS interested
(
    interested_id int8 GENERATED BY DEFAULT AS IDENTITY,
    cpf           varchar(11)  NOT NULL,
    email         varchar(255) NOT NULL,
    name          varchar(255) NOT NULL,
    PRIMARY KEY (interested_id),
    CONSTRAINT cpf_num UNIQUE (cpf)
);

CREATE TABLE IF NOT EXISTS contacts
(
    contract_id   int8 NOT NULL,
    interested_id int8 NOT NULL,
    CONSTRAINT contrac_id FOREIGN KEY (contract_id) REFERENCES contracts (contract_id),
    CONSTRAINT interested_id FOREIGN KEY (interested_id) REFERENCES interested (interested_id),
    CONSTRAINT cont_inter UNIQUE (contract_id, interested_id)
);

CREATE TABLE IF NOT EXISTS phones
(
    interested_id int8         NOT NULL,
    tel           varchar(255) NOT NULL,
    PRIMARY KEY (interested_id, tel),
    CONSTRAINT phone_interest FOREIGN KEY (interested_id) REFERENCES interested (interested_id)
);


CREATE TABLE IF NOT EXISTS types_alerts
(
    contract_type_id int8 NOT NULL,
    alert_id         int8 NOT NULL,
    CONSTRAINT contra_type_id FOREIGN KEY (contract_type_id) REFERENCES contracts_type (contract_type_id),
    CONSTRAINT alerta_id FOREIGN KEY (alert_id) REFERENCES alerts (alert_id),
    CONSTRAINT contra_alert UNIQUE (contract_type_id, alert_id)
);

-- Criação  das tabelas do quartz Scheduler --

CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    JOB_NAME          VARCHAR(200) NOT NULL,
    JOB_GROUP         VARCHAR(200) NOT NULL,
    DESCRIPTION       VARCHAR(250) NULL,
    JOB_CLASS_NAME    VARCHAR(250) NOT NULL,
    IS_DURABLE        BOOL         NOT NULL,
    IS_NONCONCURRENT  BOOL         NOT NULL,
    IS_UPDATE_DATA    BOOL         NOT NULL,
    REQUESTS_RECOVERY BOOL         NOT NULL,
    JOB_DATA          BYTEA        NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         JOB_NAME,
         JOB_GROUP
            )
);

CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS
(
    SCHED_NAME     VARCHAR(120) NOT NULL,
    TRIGGER_NAME   VARCHAR(200) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL,
    JOB_NAME       VARCHAR(200) NOT NULL,
    JOB_GROUP      VARCHAR(200) NOT NULL,
    DESCRIPTION    VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT       NULL,
    PREV_FIRE_TIME BIGINT       NULL,
    PRIORITY       INTEGER      NULL,
    TRIGGER_STATE  VARCHAR(16)  NOT NULL,
    TRIGGER_TYPE   VARCHAR(8)   NOT NULL,
    START_TIME     BIGINT       NOT NULL,
    END_TIME       BIGINT       NULL,
    CALENDAR_NAME  VARCHAR(200) NULL,
    MISFIRE_INSTR  SMALLINT     NULL,
    JOB_DATA       BYTEA        NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            ),
    FOREIGN KEY
        (
         SCHED_NAME,
         JOB_NAME,
         JOB_GROUP
            )
        REFERENCES QRTZ_JOB_DETAILS
            (
             SCHED_NAME,
             JOB_NAME,
             JOB_GROUP
                )
);

CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(200) NOT NULL,
    TRIGGER_GROUP   VARCHAR(200) NOT NULL,
    REPEAT_COUNT    BIGINT       NOT NULL,
    REPEAT_INTERVAL BIGINT       NOT NULL,
    TIMES_TRIGGERED BIGINT       NOT NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            ),
    FOREIGN KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            )
        REFERENCES QRTZ_TRIGGERS
            (
             SCHED_NAME,
             TRIGGER_NAME,
             TRIGGER_GROUP
                )
);

CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL,
    TRIGGER_NAME    VARCHAR(200) NOT NULL,
    TRIGGER_GROUP   VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID    VARCHAR(80),
    PRIMARY KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            ),
    FOREIGN KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            )
        REFERENCES QRTZ_TRIGGERS
            (
             SCHED_NAME,
             TRIGGER_NAME,
             TRIGGER_GROUP
                )
);

CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1    VARCHAR(512) NULL,
    STR_PROP_2    VARCHAR(512) NULL,
    STR_PROP_3    VARCHAR(512) NULL,
    INT_PROP_1    INT          NULL,
    INT_PROP_2    INT          NULL,
    LONG_PROP_1   BIGINT       NULL,
    LONG_PROP_2   BIGINT       NULL,
    DEC_PROP_1    NUMERIC(13,
                      4)       NULL,
    DEC_PROP_2    NUMERIC(13,
                      4)       NULL,
    BOOL_PROP_1   BOOL         NULL,
    BOOL_PROP_2   BOOL         NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            ),
    FOREIGN KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            )
        REFERENCES QRTZ_TRIGGERS
            (
             SCHED_NAME,
             TRIGGER_NAME,
             TRIGGER_GROUP
                )
);

CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA     BYTEA        NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            ),
    FOREIGN KEY
        (
         SCHED_NAME,
         TRIGGER_NAME,
         TRIGGER_GROUP
            )
        REFERENCES QRTZ_TRIGGERS
            (
             SCHED_NAME,
             TRIGGER_NAME,
             TRIGGER_GROUP
                )
);

CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR      BYTEA        NOT NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         CALENDAR_NAME
            )
);


CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         TRIGGER_GROUP
            )
);

CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    ENTRY_ID          VARCHAR(95)  NOT NULL,
    TRIGGER_NAME      VARCHAR(200) NOT NULL,
    TRIGGER_GROUP     VARCHAR(200) NOT NULL,
    INSTANCE_NAME     VARCHAR(200) NOT NULL,
    FIRED_TIME        BIGINT       NOT NULL,
    SCHED_TIME        BIGINT       NOT NULL,
    PRIORITY          INTEGER      NOT NULL,
    STATE             VARCHAR(16)  NOT NULL,
    JOB_NAME          VARCHAR(200) NULL,
    JOB_GROUP         VARCHAR(200) NULL,
    IS_NONCONCURRENT  BOOL         NULL,
    REQUESTS_RECOVERY BOOL         NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         ENTRY_ID
            )
);

CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE
(
    SCHED_NAME        VARCHAR(120) NOT NULL,
    INSTANCE_NAME     VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT       NOT NULL,
    CHECKIN_INTERVAL  BIGINT       NOT NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         INSTANCE_NAME
            )
);

CREATE TABLE IF NOT EXISTS QRTZ_LOCKS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40)  NOT NULL,
    PRIMARY KEY
        (
         SCHED_NAME,
         LOCK_NAME
            )
);

CREATE INDEX IF NOT EXISTS IDX_QRTZ_J_REQ_RECOVERY
    ON QRTZ_JOB_DETAILS (SCHED_NAME, REQUESTS_RECOVERY);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_J_GRP
    ON QRTZ_JOB_DETAILS (SCHED_NAME, JOB_GROUP);

CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_J
    ON QRTZ_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_JG
    ON QRTZ_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_C
    ON QRTZ_TRIGGERS (SCHED_NAME, CALENDAR_NAME);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_G
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_STATE
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_N_STATE
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_N_G_STATE
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_NEXT_FIRE_TIME
    ON QRTZ_TRIGGERS (SCHED_NAME, NEXT_FIRE_TIME);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_NFT_ST
    ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_NFT_MISFIRE
    ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_NFT_ST_MISFIRE
    ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_STATE);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_T_NFT_ST_MISFIRE_GRP
    ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP, TRIGGER_STATE);

CREATE INDEX IF NOT EXISTS IDX_QRTZ_FT_TRIG_INST_NAME
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_FT_INST_JOB_REQ_RCVRY
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_FT_J_G
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_FT_JG
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_FT_T_G
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
CREATE INDEX IF NOT EXISTS IDX_QRTZ_FT_TG
    ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);